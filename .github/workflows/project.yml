name: .NETProject

on:
  push:
    branches: [ "main" ]
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Check if Docker Compose is installed
      run: |
        if ! command -v docker-compose &> /dev/null
        then
           echo "Docker Compose is not installed. Installing..."
           sudo apt-get update
           sudo apt-get install -y docker-compose
        else
           echo "Docker Compose is already installed."
        fi

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS CLI
      run: | 
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_DEFAULT_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
    
    - name: Build and push Docker image - Migrator
      run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:migrator-latest --target migrator .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:migrator-latest

    - name: Build and push Docker image - WEB
      run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:web-latest --target web .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:web-latest

    - name: Build and push Docker image - Auth
      run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:auth-latest --target auth .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:auth-latest

    - name: Build and push Docker image - App
      run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:app-latest --target host .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MAINREPO }}:app-latest


    - name: Start Migrator Task
      run: |
            # Replace 'migrator_task_definition' with the actual name of your migrator task definition
            task_definition="migrator"
        
            # Start the migrator task using AWS CLI 'aws ecs run-task'
            task_response=$(aws ecs run-task --cluster bookstore-cluster --launch-type EC2 --task-definition $task_definition)
            task_arn=$(echo "$task_response" | jq -r '.tasks[0].taskArn')
            echo "Migrator Task ARN: $task_arn"
        
    - name: Fetch RDS Endpoint
      run: |
              RDS_ENDPOINT=$(aws rds describe-db-instances --query "DBInstances[0].Endpoint.Address" --output text)
              echo "DB_HOST=$RDS_ENDPOINT" >> $GITHUB_ENV
          
        
    - name: Check Database Connection
      run: |
            psql -h ${{ env.DB_HOST }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_DATABASE }} -c "SELECT 1"
            if [ $? -eq 0 ]; then
              echo "Database connection successful. Stopping migrator task."
              aws ecs stop-task --cluster your-cluster-name --task $task_arn
            else
              echo "Database connection failed. Migrator task will continue."
            fi
        
    - name: Update other services
      run: |
            aws ecs update-service --cluster your-cluster-name --service auth --force-new-deployment
            aws ecs update-service --cluster your-cluster-name --service app --force-new-deployment
            aws ecs update-service --cluster your-cluster-name --service web --force-new-deployment





































# # Start migrator task by default
#     - name: Start Migrator Task
#       run: |
#         # Replace 'migrator_task_definition' with the actual name of your migrator task definition
#         task_definition="migrator_task_definition"

#         task_response=$(aws ecs run-task --cluster bookstore-cluster --launch-type EC2 --task-definition $task_definition)
#         task_arn=$(echo "$task_response" | jq -r '.tasks[0].taskArn')
#         echo "Migrator Task ARN: $task_arn"

#     - name: Fetch RDS Endpoint
#       run: |
#           RDS_ENDPOINT=$(aws rds describe-db-instances --query "DBInstances[0].Endpoint.Address" --output text)
#           echo "DB_HOST=$RDS_ENDPOINT" >> $GITHUB_ENV
      
#     - name: Check Database Connection
#       run: |
#           psql -h ${{ env.DB_HOST }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_DATABASE }} -c "SELECT 1"
#           if [ $? -eq 0 ]; then
#             echo "Database connection successful. Stopping migrator task."
#             aws ecs update-service --cluster bookstore-cluster --service migrator --desired-count 0
#           else
#             echo "Database connection failed. Migrator task will continue."
#           fi
      
#     - name: Update other services
#       run: |
#           aws ecs update-service --cluster bookstore-cluster --service auth --force-new-deployment
#           aws ecs update-service --cluster bookstore-cluster --service app --force-new-deployment
#           aws ecs update-service --cluster bookstore-cluster --service web --force-new-deployment




























    # - name: Build and push Docker image -Migrator
    #   run: |
    #       docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MIGRATOR }}:latest --target migrator .
    #       docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.MIGRATOR }}:latest

    # - name: Build and push Docker image - WEB
    #   run: |
    #     docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.WEB }}:latest --target web .
    #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.WEB }}:latest
  
  

    # - name: Build and push Docker image -Auth
    #   run: |
    #     docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.AUTH }}:latest --target auth .
    #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.AUTH }}:latest
  
          

    # - name: Build and push Docker image - App
    #   run: |
    #          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.HOST }}:latest --target host .
    #          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.HOST }}:latest
                

    - name: Update ECS service
      run: |
          aws ecs update-service --cluster bookstore-cluster --service 	auth --force-new-deployment --debug


         
    - name: Update ECS service
      run: |
         aws ecs update-service --cluster bookstore-cluster --service app --force-new-deployment --debug


    - name: Update ECS service
      run: |
        aws ecs update-service --cluster bookstore-cluster --service migrator --force-new-deployment --debug

          
    - name: Update ECS service
      run: |
          aws ecs update-service --cluster bookstore-cluster --service web --force-new-deployment --debug

          

    # - name: Build and push Docker image - DB
    #   run: |
    #         docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.DB }}:latest --target db .
    #         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.DB }}:latest
                       


    # - name: Update ECS service
    #   run: |
    #         aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.HOST }} --force-new-deployment
  

    # - name: Update ECS service
    #   run: |
    #         aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AUTH }} --force-new-deployment
        
                  
    # - name: Update ECS service
    #   run: |
    #         aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.WEB }} --force-new-deployment


      
    # - name: Update ECS service
    #   run: |
    #         aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.MIGRATOR }} --force-new-deployment










          

          

          
